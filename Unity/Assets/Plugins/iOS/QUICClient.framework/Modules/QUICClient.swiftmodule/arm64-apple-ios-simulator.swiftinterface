// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name QUICClient
import Foundation
import Network
@_exported import QUICClient
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum MessageType : Swift.Int {
  case request = 0
  case notify = 1
  case response = 2
  case push = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ITransporter {
  @objc func connectQUIC(host: Swift.String, port: Swift.UInt16, handshakeOpts: Swift.String, completionHandler: @escaping (Swift.String) -> Swift.Void)
  @objc func sendQUIC(messageType: QUICClient.MessageType, route: Swift.String, sequenceNumber: Swift.UInt, data: Foundation.Data?, requestUid: Swift.UInt, timeout: Swift.Int, completionHandler: @escaping (Swift.String) -> Swift.Void)
  @objc func disconnect() -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class Transporter : ObjectiveC.NSObject, QUICClient.ITransporter {
  @objc public func connectQUIC(host: Swift.String, port: Swift.UInt16, handshakeOpts: Swift.String, completionHandler: @escaping (Swift.String) -> Swift.Void)
  @objc public func sendQUIC(messageType: QUICClient.MessageType, route: Swift.String, sequenceNumber: Swift.UInt, data: Foundation.Data?, requestUid: Swift.UInt, timeout: Swift.Int, completionHandler: @escaping (Swift.String) -> Swift.Void)
  @objc public func disconnect() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class FrameworkQUICClient : ObjectiveC.NSObject {
  @objc public static let shared: QUICClient.FrameworkQUICClient
  @objc override dynamic public init()
  @objc public func connectQUIC(host: Swift.String = "www.google.com", port: Swift.UInt16 = 443, handshakeOpts: Swift.String, completionHandler: @escaping (Swift.String) -> Swift.Void)
  @objc public func sendQUIC(messageType: Swift.Int, route: Swift.String = "/search?q=WildlifeStudios&tbm=nws", sequenceNumber: Swift.UInt = 1, data: Foundation.Data? = nil, requestUid: Swift.UInt = 1, timeout: Swift.Int = 60, completionHandler: @escaping (Swift.String) -> Swift.Void)
  @objc public func disconnect() -> Swift.String
  @objc deinit
}
extension QUICClient.MessageType : Swift.Equatable {}
extension QUICClient.MessageType : Swift.Hashable {}
extension QUICClient.MessageType : Swift.RawRepresentable {}
